{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","components/Chart/Chart.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","StyleSheet","container","Grid","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","newUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailydata","total","date","reportDate","fetchCountries","countries","name","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Chart","dailyData","setDailyData","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","title","text","App","state","cntry","fetchedData","setState","rawdata","this","image","src","coronaImg","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a0d0e71c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3spcl\",\"card\":\"Cards_card__1a3lz\",\"infected\":\"Cards_infected__2Nowa\",\"recovered\":\"Cards_recovered__3RByT\",\"deaths\":\"Cards_deaths__lOiO6\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport cx from \"classnames\";\r\nimport CountUp from \"react-countup\";\r\n\r\nfunction Cards({ data: { confirmed, recovered, deaths, lastUpdate } }) {\r\n  if (!confirmed) return \"Loading...\";\r\n  return (\r\n    <div className={StyleSheet.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              No. of active cases of Covid19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              No. of recoveries from Covid19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">No. of deaths by Covid19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  var newUrl = url;\r\n  if (country) {\r\n    newUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(newUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailydata) => ({\r\n      confirmed: dailydata.confirmed.total,\r\n      deaths: dailydata.deaths.total,\r\n      date: dailydata.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nfunction CountryPicker({ handleCountryChange }) {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [fetchedCountries]);\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nfunction Chart({ data, country }) {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: \"rgba(51,51,255,0.5)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"#red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  const barChart =\r\n    data && data.confirmed && data.confirmed.value ? (\r\n      <Bar\r\n        data={{\r\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n          datasets: [\r\n            {\r\n              labels: \"People\",\r\n              backgroundColor: [\r\n                \"rgba(0,0,255,0.5)\",\r\n                \"rgba(0,255,0,0.5)\",\r\n                \"rgba(255,0,0,0.5)\",\r\n              ],\r\n              data: [\r\n                data.confirmed.value,\r\n                data.recovered.value,\r\n                data.deaths.value,\r\n              ],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current scenario in ${country}` },\r\n        }}\r\n      />\r\n    ) : null;\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport coronaImg from \"./images/image.png\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const rawdata = await fetchData();\n    this.setState({ data: rawdata });\n  }\n\n  handleCountryChange = async (cntry) => {\n    console.log(cntry);\n    const fetchedData = await fetchData(cntry);\n    this.setState({ data: fetchedData, country: cntry });\n    console.log(this.state.country);\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImg} alt=\"COVID19\" />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__qHqXl\",\"image\":\"App_image__1UJaA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__cr6bK\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}